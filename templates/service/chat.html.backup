<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÂÆ¢ÊúçÂ∑•‰ΩúÂè∞ - ËÅäÂ§©</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #f5f7fa;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        /* ‰æßËæπÊ†è */
        .sidebar {
            width: 320px;
            background: white;
            border-right: 1px solid #e5e7eb;
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
        }

        .sidebar-header h2 {
            font-size: 20px;
            margin-bottom: 10px;
        }

        .stats {
            font-size: 14px;
            color: #6b7280;
        }

        .stats span {
            color: #667eea;
            font-weight: 600;
        }

        .search-box {
            padding: 15px 20px;
            border-bottom: 1px solid #e5e7eb;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
        }

        .visitor-list {
            flex: 1;
            overflow-y: auto;
        }

        .visitor-item {
            padding: 15px 20px;
            border-bottom: 1px solid #f3f4f6;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 12px;
            transition: background 0.2s;
        }

        .visitor-item:hover {
            background: #f9fafb;
        }

        .visitor-item.active {
            background: #eff6ff;
            border-left: 3px solid #667eea;
        }

        .visitor-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            flex-shrink: 0;
        }

        .visitor-info {
            flex: 1;
            min-width: 0;
        }

        .visitor-name {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 4px;
        }

        .visitor-last-msg {
            font-size: 13px;
            color: #6b7280;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .unread-badge {
            background: #ef4444;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        /* ËÅäÂ§©Âå∫Âüü */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-visitor-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .chat-visitor-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
        }

        .chat-visitor-details h3 {
            font-size: 16px;
            margin-bottom: 4px;
        }

        .chat-visitor-details p {
            font-size: 13px;
            color: #6b7280;
        }

        .chat-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            padding: 8px 16px;
            border: 1px solid #d1d5db;
            background: white;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }

        .action-btn:hover {
            background: #f9fafb;
            border-color: #667eea;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #f9fafb;
        }

        .message {
            margin-bottom: 20px;
            display: flex;
            gap: 12px;
        }

        .message.service {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
            flex-shrink: 0;
        }

        .message.service .message-avatar {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .message-content {
            max-width: 60%;
        }

        .message-bubble {
            padding: 12px 16px;
            border-radius: 12px;
            background: white;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
            word-wrap: break-word;
        }

        .message.service .message-bubble {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .message-time {
            font-size: 12px;
            color: #9ca3af;
            margin-top: 4px;
        }

        .typing-indicator {
            display: none;
            padding: 10px 20px;
            background: #fef3c7;
            border-left: 3px solid #f59e0b;
            font-size: 13px;
            color: #92400e;
        }

        .typing-indicator.show {
            display: block;
        }

        .quick-replies {
            padding: 15px 20px;
            border-top: 1px solid #e5e7eb;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .quick-reply-btn {
            padding: 6px 12px;
            border: 1px solid #d1d5db;
            background: white;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.2s;
        }

        .quick-reply-btn:hover {
            background: #f9fafb;
            border-color: #667eea;
        }

        .chat-input {
            border-top: 1px solid #e5e7eb;
            background: white;
        }

        .input-toolbar {
            padding: 10px 20px;
            display: flex;
            gap: 8px;
            border-bottom: 1px solid #e5e7eb;
        }

        .toolbar-btn {
            width: 32px;
            height: 32px;
            border: none;
            background: transparent;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.2s;
        }

        .toolbar-btn:hover {
            background: #f3f4f6;
        }

        .input-wrapper {
            display: flex;
            padding: 15px 20px;
            gap: 12px;
            align-items: flex-end;
        }

        #messageInput {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            font-family: inherit;
            resize: none;
            min-height: 40px;
            max-height: 120px;
        }

        #sendBtn {
            padding: 10px 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: transform 0.2s;
        }

        #sendBtn:hover {
            transform: translateY(-2px);
        }

        #sendBtn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #9ca3af;
        }

        .empty-state h3 {
            margin-top: 16px;
            font-size: 18px;
        }

        .empty-state p {
            margin-top: 8px;
            font-size: 14px;
        }

        .system-message {
            text-align: center;
            padding: 10px;
            margin: 20px;
            background: #eff6ff;
            border-radius: 8px;
            font-size: 13px;
            color: #1e40af;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- ‰æßËæπÊ†è - ËÆøÂÆ¢ÂàóË°® -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h2>üí¨ ‰ºöËØùÂàóË°®</h2>
                <div class="stats">
                    Âú®Á∫øËÆøÂÆ¢: <span id="onlineCount">0</span> | 
                    ÂæÖÂ§ÑÁêÜ: <span id="pendingCount">0</span>
                </div>
            </div>

            <div class="search-box">
                <input type="text" class="search-input" placeholder="üîç ÊêúÁ¥¢ËÆøÂÆ¢..." id="searchInput">
            </div>

            <div class="visitor-list" id="visitorList">
                <div class="empty-state">
                    <div style="font-size: 48px;">üë•</div>
                    <h3>ÊöÇÊó†ËÆøÂÆ¢</h3>
                    <p>Á≠âÂæÖËÆøÂÆ¢Êé•ÂÖ•...</p>
                </div>
            </div>
        </div>

        <!-- ‰∏ªËÅäÂ§©Âå∫Âüü -->
        <div class="chat-area">
            <div id="chatContainer" class="empty-state" style="height: 100%;">
                <div style="font-size: 64px;">üí¨</div>
                <h3>ÈÄâÊã©‰∏Ä‰∏™ËÆøÂÆ¢ÂºÄÂßãËÅäÂ§©</h3>
                <p>‰ªéÂ∑¶‰æßËÆøÂÆ¢ÂàóË°®ÈÄâÊã©Ë¶ÅÊ≤üÈÄöÁöÑËÆøÂÆ¢</p>
            </div>

            <!-- ËÅäÂ§©ÁïåÈù¢ÔºàÂä®ÊÄÅÊòæÁ§∫Ôºâ -->
            <div id="chatInterface" style="display: none; height: 100%; flex-direction: column;">
                <div class="chat-header">
                    <div class="chat-visitor-info">
                        <div class="chat-visitor-avatar" id="currentVisitorAvatar">üë§</div>
                        <div class="chat-visitor-details">
                            <h3 id="currentVisitorName">ËÆøÂÆ¢</h3>
                            <p id="currentVisitorInfo">Êù•Ê∫ê: ÁΩëÁ´ôÈ¶ñÈ°µ</p>
                        </div>
                    </div>
                    <div class="chat-actions">
                        <button class="action-btn" onclick="transferChat()">üîÑ ËΩ¨Êé•</button>
                        <button class="action-btn" onclick="endChat()">‚úì ÁªìÊùü</button>
                    </div>
                </div>

                <div class="chat-messages" id="chatMessages">
                    <!-- Ê∂àÊÅØÂä®ÊÄÅÂä†ËΩΩ -->
                </div>

                <div class="typing-indicator" id="typingIndicator">
                    ËÆøÂÆ¢Ê≠£Âú®ËæìÂÖ•...
                </div>

                <div class="quick-replies">
                    <button class="quick-reply-btn" onclick="sendQuickReply('ÊÇ®Â•ΩÔºåÊàëÊòØÂÆ¢ÊúçÔºåÂæàÈ´òÂÖ¥‰∏∫ÊÇ®ÊúçÂä°ÔºÅ')">üëã Ê¨¢ËøéËØ≠</button>
                    <button class="quick-reply-btn" onclick="sendQuickReply('ËØ∑Á®çÁ≠âÔºåÊàëÂ∏ÆÊÇ®Êü•ËØ¢‰∏Ä‰∏ã')">‚è±Ô∏è Á®çÁ≠â</button>
                    <button class="quick-reply-btn" onclick="sendQuickReply('ÊÑüË∞¢ÊÇ®ÁöÑÂí®ËØ¢ÔºåËøòÊúâÂÖ∂‰ªñÈóÆÈ¢òÂêóÔºü')">üíØ ÊÑüË∞¢</button>
                    <button class="quick-reply-btn" onclick="sendQuickReply('ÂæàÊä±Ê≠âÁªôÊÇ®Â∏¶Êù•‰∏ç‰æø')">üòÖ Êä±Ê≠â</button>
                </div>

                <div class="chat-input">
                    <div class="input-toolbar">
                        <button class="toolbar-btn" title="Ë°®ÊÉÖ">üòä</button>
                        <button class="toolbar-btn" title="ÂõæÁâá">üì∑</button>
                        <button class="toolbar-btn" title="Êñá‰ª∂">üìé</button>
                        <button class="toolbar-btn" title="Áü•ËØÜÂ∫ì">üìö</button>
                    </div>
                    <div class="input-wrapper">
                        <textarea id="messageInput" placeholder="ËæìÂÖ•Ê∂àÊÅØ..." rows="1"></textarea>
                        <button id="sendBtn">ÂèëÈÄÅ</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Socket.IO ÂÆ¢Êà∑Á´Ø -->
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    
    <script>
        // ÂÆ¢Êúç‰ø°ÊÅØÔºà‰ªéFlaskÊ®°ÊùøÊ≥®ÂÖ•Ôºâ
        const serviceId = '{{ current_user.service_id }}';
        const serviceName = '{{ current_user.nick_name }}';
        let socket = null;
        let currentVisitorId = null;
        let visitors = {}; // Â≠òÂÇ®ËÆøÂÆ¢‰ø°ÊÅØ
        let typingTimeout = null;

        // ÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            initSocket();
            initInput();
        });

        // ÂàùÂßãÂåñSocket.IOËøûÊé•
        function initSocket() {
            socket = io({
                transports: ['websocket', 'polling']
            });

            // ËøûÊé•ÊàêÂäü
            socket.on('connect', function() {
                console.log('Socket connected:', socket.id);
                
                // ÂÆ¢ÊúçÂä†ÂÖ•
                socket.emit('service_join', {
                    service_id: serviceId,
                    service_name: serviceName
                });
            });

            // Âä†ÂÖ•ÊàêÂäü
            socket.on('join_success', function(data) {
                console.log('Join success:', data);
            });

            // Êñ∞ËÆøÂÆ¢‰∏äÁ∫ø
            socket.on('new_visitor', function(data) {
                console.log('New visitor:', data);
                addVisitorToList(data);
                updateStats();
            });

            // Êé•Êî∂Ê∂àÊÅØ
            socket.on('receive_message', function(data) {
                console.log('Received message:', data);
                
                // Â¶ÇÊûúÊòØÂΩìÂâçËÆøÂÆ¢ÁöÑÊ∂àÊÅØÔºåÊ∑ªÂä†Âà∞ËÅäÂ§©ÁïåÈù¢
                if (data.from_id == currentVisitorId) {
                    addMessage(data.content, 'visitor', data.timestamp);
                } else {
                    // ÂÖ∂‰ªñËÆøÂÆ¢ÁöÑÊ∂àÊÅØÔºåÊõ¥Êñ∞Êú™ËØªÊï∞
                    updateVisitorUnread(data.from_id);
                }
            });

            // ËÆøÂÆ¢Ê≠£Âú®ËæìÂÖ•
            socket.on('user_typing', function(data) {
                if (data.from_id == currentVisitorId) {
                    const typingIndicator = document.getElementById('typingIndicator');
                    if (data.is_typing) {
                        typingIndicator.classList.add('show');
                    } else {
                        typingIndicator.classList.remove('show');
                    }
                }
            });

            // ËÆøÂÆ¢Á¶ªÁ∫ø
            socket.on('user_offline', function(data) {
                if (data.user_type === 'visitor') {
                    removeVisitorFromList(data.user_id);
                    updateStats();
                }
            });

            // Ëé∑ÂèñÂú®Á∫øÁî®Êà∑
            socket.emit('get_online_users');
            socket.on('online_users_list', function(data) {
                console.log('Online users:', data);
                // ÊòæÁ§∫Âú®Á∫øËÆøÂÆ¢
                if (data.visitors) {
                    data.visitors.forEach(visitor => {
                        addVisitorToList(visitor);
                    });
                }
                updateStats();
            });
        }

        // ÂàùÂßãÂåñËæìÂÖ•Ê°Ü
        function initInput() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            // Ëá™Âä®Ë∞ÉÊï¥È´òÂ∫¶
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
                
                // ÂèëÈÄÅËæìÂÖ•Áä∂ÊÄÅ
                if (currentVisitorId) {
                    clearTimeout(typingTimeout);
                    
                    socket.emit('typing', {
                        from_id: serviceId,
                        from_type: 'service',
                        from_name: serviceName,
                        to_id: currentVisitorId,
                        to_type: 'visitor',
                        is_typing: true
                    });

                    typingTimeout = setTimeout(function() {
                        socket.emit('typing', {
                            from_id: serviceId,
                            from_type: 'service',
                            to_id: currentVisitorId,
                            to_type: 'visitor',
                            is_typing: false
                        });
                    }, 1000);
                }
            });

            // ÂõûËΩ¶ÂèëÈÄÅÔºàShift+EnterÊç¢Ë°åÔºâ
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // ÁÇπÂáªÂèëÈÄÅ
            sendBtn.addEventListener('click', sendMessage);

            // ÊêúÁ¥¢ËÆøÂÆ¢
            document.getElementById('searchInput').addEventListener('input', function(e) {
                const keyword = e.target.value.toLowerCase();
                const items = document.querySelectorAll('.visitor-item');
                items.forEach(item => {
                    const name = item.dataset.name.toLowerCase();
                    item.style.display = name.includes(keyword) ? 'flex' : 'none';
                });
            });
        }

        // Ê∑ªÂä†ËÆøÂÆ¢Âà∞ÂàóË°®
        function addVisitorToList(visitor) {
            const visitorId = visitor.visitor_id;
            
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
            if (document.getElementById('visitor_' + visitorId)) {
                return;
            }

            // ÁßªÈô§Á©∫Áä∂ÊÄÅ
            const emptyState = document.querySelector('.visitor-list .empty-state');
            if (emptyState) {
                emptyState.remove();
            }

            visitors[visitorId] = visitor;

            const visitorEl = document.createElement('div');
            visitorEl.className = 'visitor-item';
            visitorEl.id = 'visitor_' + visitorId;
            visitorEl.dataset.name = visitor.visitor_name;
            visitorEl.onclick = function() { selectVisitor(visitorId); };
            visitorEl.innerHTML = `
                <div class="visitor-avatar">${visitor.visitor_name.charAt(0).toUpperCase()}</div>
                <div class="visitor-info">
                    <div class="visitor-name">${visitor.visitor_name}</div>
                    <div class="visitor-last-msg">Á≠âÂæÖÊé•ÂÖ•...</div>
                </div>
                <span class="unread-badge" style="display: none;">0</span>
            `;

            document.getElementById('visitorList').appendChild(visitorEl);
        }

        // ÈÄâÊã©ËÆøÂÆ¢
        function selectVisitor(visitorId) {
            currentVisitorId = visitorId;
            const visitor = visitors[visitorId];

            // Êõ¥Êñ∞Ê¥ªÂä®Áä∂ÊÄÅ
            document.querySelectorAll('.visitor-item').forEach(el => {
                el.classList.remove('active');
            });
            document.getElementById('visitor_' + visitorId).classList.add('active');

            // Ê∏ÖÈô§Êú™ËØª
            const unreadBadge = document.querySelector('#visitor_' + visitorId + ' .unread-badge');
            if (unreadBadge) {
                unreadBadge.style.display = 'none';
                unreadBadge.textContent = '0';
            }

            // ÊòæÁ§∫ËÅäÂ§©ÁïåÈù¢
            document.getElementById('chatContainer').style.display = 'none';
            document.getElementById('chatInterface').style.display = 'flex';

            // Êõ¥Êñ∞ËÆøÂÆ¢‰ø°ÊÅØ
            document.getElementById('currentVisitorName').textContent = visitor.visitor_name;
            document.getElementById('currentVisitorAvatar').textContent = visitor.visitor_name.charAt(0).toUpperCase();
            document.getElementById('currentVisitorInfo').textContent = 'ËÆøÂÆ¢ID: ' + visitorId;

            // Ê∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩï
            document.getElementById('chatMessages').innerHTML = '';
            
            // Âä†ËΩΩÂéÜÂè≤Ê∂àÊÅØÔºàÂ¶ÇÊûúÊúâÔºâ
            loadChatHistory(visitorId);
        }

        // Âä†ËΩΩËÅäÂ§©ÂéÜÂè≤
        function loadChatHistory(visitorId) {
            // TODO: ‰ªéÊúçÂä°Âô®Âä†ËΩΩÂéÜÂè≤Ê∂àÊÅØ
            addSystemMessage('‰ºöËØùÂºÄÂßã');
        }

        // ÂèëÈÄÅÊ∂àÊÅØ
        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const content = messageInput.value.trim();

            if (!content || !currentVisitorId) return;

            if (!socket || !socket.connected) {
                alert('Êú™ËøûÊé•Âà∞ÊúçÂä°Âô®');
                return;
            }

            // Ê∑ªÂä†Âà∞ÁïåÈù¢
            addMessage(content, 'service', new Date());

            // ÂèëÈÄÅÂà∞ÊúçÂä°Âô®
            socket.emit('send_message', {
                from_id: serviceId,
                from_type: 'service',
                from_name: serviceName,
                to_id: currentVisitorId,
                to_type: 'visitor',
                content: content,
                msg_type: 'text',
                timestamp: new Date().toISOString()
            });

            // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
            messageInput.value = '';
            messageInput.style.height = 'auto';
        }

        // Âø´Êç∑ÂõûÂ§ç
        function sendQuickReply(content) {
            if (!currentVisitorId) {
                alert('ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ËÆøÂÆ¢');
                return;
            }
            document.getElementById('messageInput').value = content;
            sendMessage();
        }

        // Ê∑ªÂä†Ê∂àÊÅØÂà∞ËÅäÂ§©ÁïåÈù¢
        function addMessage(content, type, timestamp) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageEl = document.createElement('div');
            messageEl.className = 'message ' + type;
            
            const time = formatTime(timestamp);
            const avatar = type === 'service' ? 'üë®‚Äçüíº' : 'üë§';
            
            messageEl.innerHTML = `
                <div class="message-avatar">${avatar}</div>
                <div class="message-content">
                    <div class="message-bubble">${content}</div>
                    <div class="message-time">${time}</div>
                </div>
            `;

            messagesContainer.appendChild(messageEl);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Ê∑ªÂä†Á≥ªÁªüÊ∂àÊÅØ
        function addSystemMessage(content) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageEl = document.createElement('div');
            messageEl.className = 'system-message';
            messageEl.textContent = content;
            messagesContainer.appendChild(messageEl);
        }

        // Êõ¥Êñ∞ËÆøÂÆ¢Êú™ËØªÊï∞
        function updateVisitorUnread(visitorId) {
            const unreadBadge = document.querySelector('#visitor_' + visitorId + ' .unread-badge');
            if (unreadBadge) {
                let count = parseInt(unreadBadge.textContent) || 0;
                count++;
                unreadBadge.textContent = count;
                unreadBadge.style.display = 'block';
            }
        }

        // ÁßªÈô§ËÆøÂÆ¢
        function removeVisitorFromList(visitorId) {
            const el = document.getElementById('visitor_' + visitorId);
            if (el) {
                el.remove();
            }
            delete visitors[visitorId];

            // Â¶ÇÊûúÊòØÂΩìÂâçËÆøÂÆ¢ÔºåÂÖ≥Èó≠ËÅäÂ§©ÁïåÈù¢
            if (currentVisitorId == visitorId) {
                currentVisitorId = null;
                document.getElementById('chatInterface').style.display = 'none';
                document.getElementById('chatContainer').style.display = 'flex';
            }

            // Â¶ÇÊûúÊ≤°ÊúâËÆøÂÆ¢‰∫ÜÔºåÊòæÁ§∫Á©∫Áä∂ÊÄÅ
            if (Object.keys(visitors).length === 0) {
                document.getElementById('visitorList').innerHTML = `
                    <div class="empty-state">
                        <div style="font-size: 48px;">üë•</div>
                        <h3>ÊöÇÊó†ËÆøÂÆ¢</h3>
                        <p>Á≠âÂæÖËÆøÂÆ¢Êé•ÂÖ•...</p>
                    </div>
                `;
            }
        }

        // Êõ¥Êñ∞ÁªüËÆ°
        function updateStats() {
            const onlineCount = Object.keys(visitors).length;
            document.getElementById('onlineCount').textContent = onlineCount;
            document.getElementById('pendingCount').textContent = onlineCount;
        }

        // ËΩ¨Êé•‰ºöËØù
        function transferChat() {
            if (!currentVisitorId) {
                alert('ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ËÆøÂÆ¢');
                return;
            }
            
            // Ëé∑ÂèñÂÖ∂‰ªñÂú®Á∫øÂÆ¢ÊúçÂàóË°®
            fetch('/api/service/list?state=online')
                .then(response => response.json())
                .then(data => {
                    if (data.code === 0 && data.data.length > 0) {
                        // ËøáÊª§ÊéâÂΩìÂâçÂÆ¢Êúç
                        const otherServices = data.data.filter(s => s.service_id != serviceId);
                        
                        if (otherServices.length === 0) {
                            alert('Ê≤°ÊúâÂÖ∂‰ªñÂú®Á∫øÂÆ¢ÊúçÂèØ‰ª•ËΩ¨Êé•');
                            return;
                        }
                        
                        // ÊòæÁ§∫ÈÄâÊã©ÂØπËØùÊ°Ü
                        const serviceNames = otherServices.map((s, i) => `${i + 1}. ${s.nick_name}`).join('\n');
                        const choice = prompt(`ÈÄâÊã©Ë¶ÅËΩ¨Êé•ÁöÑÂÆ¢ÊúçÔºàËæìÂÖ•Â∫èÂè∑Ôºâ:\n${serviceNames}`);
                        
                        if (choice) {
                            const index = parseInt(choice) - 1;
                            if (index >= 0 && index < otherServices.length) {
                                const targetService = otherServices[index];
                                performTransfer(targetService.service_id, targetService.nick_name);
                            } else {
                                alert('Êó†ÊïàÁöÑÈÄâÊã©');
                            }
                        }
                    } else {
                        alert('Ê≤°ÊúâÂÖ∂‰ªñÂú®Á∫øÂÆ¢ÊúçÂèØ‰ª•ËΩ¨Êé•');
                    }
                })
                .catch(error => {
                    console.error('Ëé∑ÂèñÂÆ¢ÊúçÂàóË°®Â§±Ë¥•:', error);
                    alert('ËΩ¨Êé•Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
                });
        }

        // ÊâßË°åËΩ¨Êé•
        function performTransfer(toServiceId, toServiceName) {
            fetch('/api/queue/transfer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    visitor_id: currentVisitorId,
                    to_service_id: toServiceId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.code === 0) {
                    // ÂèëÈÄÅÁ≥ªÁªüÊ∂àÊÅØÈÄöÁü•ËÆøÂÆ¢
                    addSystemMessage(`‰ºöËØùÂ∑≤ËΩ¨Êé•Áªô ${toServiceName}`);
                    
                    // ÈÄöÁü•Êñ∞ÂÆ¢Êúç
                    if (socket && socket.connected) {
                        socket.emit('transfer_notification', {
                            from_service_id: serviceId,
                            to_service_id: toServiceId,
                            visitor_id: currentVisitorId
                        });
                    }
                    
                    // ÁßªÈô§ËÆøÂÆ¢
                    removeVisitorFromList(currentVisitorId);
                    alert('ËΩ¨Êé•ÊàêÂäü');
                } else {
                    alert('ËΩ¨Êé•Â§±Ë¥•: ' + data.msg);
                }
            })
            .catch(error => {
                console.error('ËΩ¨Êé•Â§±Ë¥•:', error);
                alert('ËΩ¨Êé•Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
            });
        }

        // ÁªìÊùü‰ºöËØù
        function endChat() {
            if (!currentVisitorId) {
                alert('ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ËÆøÂÆ¢');
                return;
            }
            
            if (!confirm('Á°ÆÂÆöË¶ÅÁªìÊùüÊ≠§‰ºöËØùÂêóÔºü')) {
                return;
            }
            
            fetch('/api/queue/close', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    visitor_id: currentVisitorId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.code === 0) {
                    // ÂèëÈÄÅÁ≥ªÁªüÊ∂àÊÅØ
                    addSystemMessage('‰ºöËØùÂ∑≤ÁªìÊùü');
                    
                    // ÈÄöÁü•ËÆøÂÆ¢
                    if (socket && socket.connected) {
                        socket.emit('session_closed', {
                            visitor_id: currentVisitorId,
                            service_id: serviceId
                        });
                    }
                    
                    // ÁßªÈô§ËÆøÂÆ¢
                    removeVisitorFromList(currentVisitorId);
                    alert('‰ºöËØùÂ∑≤ÁªìÊùü');
                } else {
                    alert('ÁªìÊùü‰ºöËØùÂ§±Ë¥•: ' + data.msg);
                }
            })
            .catch(error => {
                console.error('ÁªìÊùü‰ºöËØùÂ§±Ë¥•:', error);
                alert('ÁªìÊùü‰ºöËØùÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
            });
        }

        // Ê†ºÂºèÂåñÊó∂Èó¥
        function formatTime(date) {
            if (!date) return '';
            const d = new Date(date);
            const hours = String(d.getHours()).padStart(2, '0');
            const minutes = String(d.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        }
    </script>
</body>
</html>
